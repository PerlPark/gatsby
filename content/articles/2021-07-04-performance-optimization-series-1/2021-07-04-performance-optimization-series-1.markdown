---
type: article
title: "성능 개선 프로젝트(1) - 성능 개선의 종류?"
date: 2021-07-04 23:55:55 +0900
slug: "/articles/performance/1"
description: "최근 지원했던 회사의 주요 업무에 '성능 분석 및 개선'이라는 항목이 있었다. 대부분의 신입급 취준생, 학부생의 경우 포트폴리오를 위해 서비스를 새로 개발하고 런칭해 본 경험에 비해 후속 작업인 리팩토링(성능 개선, 유지보수, 가독성 개선 등)을 해본 경험은 부족할 것이다."
tags:
    - 성능
---

최근 지원했던 회사의 주요 업무에 '성능 분석 및 개선'이라는 항목이 있었다. 대부분의 신입급 취준생, 학부생의 경우 포트폴리오를 위해 서비스를 새로 개발하고 런칭해 본 경험에 비해 후속 작업인 리팩토링(성능 개선, 유지보수, 가독성 개선 등)을 해본 경험은 부족할 것이다. 나 또한 그랬기에 어렵사리 기회를 얻게된 면접에서 결국 떨어지고 말았다.

그래서 이제라도 성능 개선에 대한 경험을 쌓고 공부하기 위해 글을 작성해본다 :)
~~(지난 날에 대한 후회를 발판삼아 발전하자!)~~


<span style="color: gray">※ 이 글은 프론트엔드 파트의 관점에서 씁니다.
※ 내용을 발전시키거나 바로잡을 부분에 대한 피드백 환영합니다!</span>


## 성능 엔지니어링(Performance Engineering)
작업에 앞서 성능 엔지니어링 방법에 대해 알면 좋을 것 같아 소개한다.
성능 엔지니어링이란 **목표 성능**을 정의하고, 이를 달성하기 위해 **시스템의 구조를 개선**하는 일련의 작업이다.

[조대협님의 블로그](https://bcho.tistory.com/787)에 개발 전 설계 단계부터 개발 후의 운영 단계까지 전 과정에 걸친 성능 개선 방법이 자세하게 소개되어있고, <u>단계별 성능 개선방법 / 시스템 용량 산정 / 성능 목표와 모델의 정의</u> 내용은 프론트엔드 개발자도 읽어봄직한 내용이다.

## 성능의 종류
프론트 파트에서 성능을 개선할 방법은 무엇이 있을까?
내가 알고 있는 방법을 정리해보면, 크게 두 가지로 추려볼 수 있었다.

1) 코드 상의 성능 개선
2) 리소스 상의 성능 개선

두 개선 방법에 대해 간단히 정리해보고, 어느 상황에 어떤 개선을 할 것인지 생각해보겠다.


### 1) 코드 상의 성능 개선
프론트의 로직 내에서 <u>불필요하게 데이터 공간을 낭비하는 부분이나 처리가 오래 걸리는 부분을 확인</u>하고 리팩토링하는 과정을 거쳐야 한다.
(시간 복잡도, 공간 복잡도를 측정하여 알고리즘의 성능을 개선하는 방법과 비슷)

구조부터 뜯어 고치게 된다면 시간이 오래 걸리기 때문에 점진적으로 개선하는 방법이고,
로직이 아주 잘못되어있던 경우가 아니라면, 사용자가 체감할 수 있는 속도의 개선보다는 코드의 '퀄리티' 측면에서의 개선이 될 수 있다.

### 2) 리소스 상의 성능 개선
여기서 말하는 리소스는 사용자가 서비스에 접속했을 때 내려받게되는 문서, 스크립트 이미지 파일등을 말한다.
브라우저에서 페이지를 열고 개발자도구에서 Network 탭에 들어가면 각종 파일들을 내려받는데 걸리는 시간을 확인할 수 있는데, 시간이 오래 걸리는 파일들을 압축하거나 lazy loading 처리를 해서 사용자가 빠르게 웹페이지를 확인할 수 있게 개선하는 방법이다.
(구글 Pagespeed Insights를 이용하면, 개선이 필요한 부분과 개선 방법에 대해 더욱 자세히 알 수 있다.)
![](https://images.velog.io/images/jinjoo/post/6fe28561-ba67-4bd8-9d71-9ea655043ea4/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-27%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%208.42.48.png)

이 방법은 사용자에 입장에서 테스트를 하고 개선하기 때문에, 즉각적인 개선을 이뤄낼 수 있다.
하지만 문제시 되는 부분만을 고치는 방법이라서, 코드 상에 근본적인 문제가 있을 경우에는 이 방법만으론 해결할 수가 없다.

## 개선 순서 정하기
그래서 목적과 상황에 따라 먼저 수행할 개선 방법을 정해야 한다.
순서는 회사나 개인의 관점에 따라 다를 수 있겠지만, 나의 경우라면 아래와 같이 개선 순서를 정하겠다.

**1) 사용자의 개선 요청, 속도에 대한 불만족 피드백이 있을 경우**
	=> <span style="color: red">리소스 상의 성능 개선</span>을 진행 후, 코드 상의 성능 개선을 검토
**2) 프로덕트의 품질 향상을 위한 개선 작업에 착수하는 경우**
	=> <span style="color: red">코드 상의 성능 개선</span>을 진행 후, 리소스 상의 성능 개선을 진행
    
※ 1번 사용자의 개선 요청 시에 '코드 개선'이 '검토'인 이유는, <span style="color: green"><사용자 요청 대응></span>이라는 태스크에서 작업이 완료되는데 오래 걸릴 코드 개선까지 진행하기보다는, 검토를 통해 코드에도 근본적인 문제가 있을 경우에 <span style="color: green"><프로덕트의 품질 향상></span>이라는 중장기 목표를 수립해 별도로 진행하는 것이 맞다고 생각했기 때문이다.
  

### 다음 과정은...
알아본 개선 방법을 따라 실제 작업을 하려고 한다.
성능 개선 대상으로 얼마전에 런칭시킨 '어드바이스트' 웹서비스를 정했는데, 현 상태로 접속해보면 눈에 띄게 로딩이 느린 부분이 있다.
그래서 개선 순서로는 리소스 상의 성능 개선을 우선한 뒤, 코드 상의 성능 개선을 차차 진행시켜보려고 한다.

그럼 To be continued...

---
읽어주셔서 감사합니다!👍
<span style="color: gray">※ 내용을 발전시키거나 바로잡을 부분에 대한 피드백 환영합니다!</span>